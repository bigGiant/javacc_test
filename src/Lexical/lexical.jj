/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(lexical)package Lexical;
import java.io.File;
import java.io.FileReader;
public class lexical{  public static void main(String args []) throws ParseException  {
    FileReader filereader = new FileReader(new File("main.c"));
    SimpleCharStream scs = new SimpleCharStream(filereader);
    lexicalTokenManager ltm = new lexicalTokenManager(scs);
    Token token = new Token();
    while((token = ltm.getNextToken()).kind!= EOF)
    {
        System.out.println(token.kind+"\t"+token.image);
    }  }}PARSER_END(lexical)SKIP :{  " "| "\r"| "\t"| "\n"}

TOKEN : /* KEYWORDS */
{
  < IF: "if" >
| < ELSE: "else" >
| < INT : "int" >
| < RETURN : "return" >
| < VOID : "void" >
| < WNILE : "while" >
| < MAIN : "main" >}
TOKEN : /*IDENTIFIERS*/
{
  < IDENTIFIER :
  	< LETTER >
  	(
  	  < LETTER >
  	| < DIGIT >  	)* >
 | < #LETTER : ["_", "a"-"z", "A"-"Z"] >
 | < #DIGIT : ["0"-"9"] >
}
TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >
| < DY : ">" >
| < XY : "<" >
| < BD : "!" >
| < EQUAL : "=" >}
TOKEN :/*SEPARATER*/
{
  < FH: ";" >
| < DH: "," > 
| < DZKH: "{" >
| < DYKH: "}" >
| < ZZKH: "[" >
| < ZYKH: "]" >
| < XZKH: "(" >
| < XYKH: ")" >
}
TOKEN :{  < CONSTANT : (< DIGIT >)+ >}int one_line() :{}{  sum() ";"  {    return 0;  }| ";"  {    return 1;  }}void sum() :{}{  term()  (    (      < PLUS >    | < MINUS >    )    term()  )*}void term() :{}{  unary()  (    (      < MULTIPLY >    | < DIVIDE >    )    unary()  )*}void unary() :{}{  < MINUS > element()| element()}void element() :{}{  < CONSTANT >| "(" sum() ")"}
